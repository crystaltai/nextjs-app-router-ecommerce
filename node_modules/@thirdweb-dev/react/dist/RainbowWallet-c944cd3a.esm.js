import { RainbowWallet, getInjectedRainbowProvider } from '@thirdweb-dev/wallets';
import { useCreateWalletInstance, useWalletContext, useConnect } from '@thirdweb-dev/react-core';
import { S as ScanScreen, i as isMobile, C as ConnectingScreen, G as GetStartedScreen } from './headlessConnectUI-a5cfa32b.esm.js';
import { useState, useRef, useEffect } from 'react';
import { jsx } from 'react/jsx-runtime';
import './basic-cc19efbe.esm.js';
import '@emotion/react';
import '@emotion/styled';
import '@radix-ui/colors';
import 'detect-browser';
import 'react-qr-code';
import '@radix-ui/react-icons';

const RainbowScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = useRef(false);
  useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const rainbow = createInstance(walletConfig);
    setConnectionStatus("connecting");
    rainbow.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(rainbow);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton: hideBackButton
  });
};

const RainbowConnectUI = props => {
  const [screen, setScreen] = useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = useConnect();
  const hideBackButton = props.supportedWallets.length === 1;
  const {
    goBack
  } = props;
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
        }
      }

      // if rainbow is not injected
      else {
        // on mobile, open rainbow app link
        if (isMobile()) {
          window.open(`https://rainbow.app.link/dapp/${window.location.toString()}`);
        } else {
          // on desktop, show the rainbow scan qr code
          setScreen("scanning");
        }
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      hideBackButton: hideBackButton,
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://support.rainbow.io/hc/en-us/articles/4406430256539-User-Guide-Troubleshooting"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: () => {
        setScreen("scanning");
      }
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(RainbowScan, {
      onBack: goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      hideBackButton: hideBackButton,
      walletConfig: walletConfig
    });
  }
  return null;
};

const rainbowWallet = options => {
  return {
    id: RainbowWallet.id,
    meta: RainbowWallet.meta,
    create: walletOptions => {
      const wallet = new RainbowWallet({
        ...walletOptions,
        projectId: options?.projectId,
        qrcode: false
      });
      return wallet;
    },
    connectUI: RainbowConnectUI,
    isInstalled() {
      return !!getInjectedRainbowProvider();
    }
  };
};

export { rainbowWallet };
