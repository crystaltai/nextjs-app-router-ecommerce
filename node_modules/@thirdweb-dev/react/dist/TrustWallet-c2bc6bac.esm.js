import { TrustWallet as TrustWallet$1, assertWindowEthereum } from '@thirdweb-dev/wallets';
import { useCreateWalletInstance, useWalletContext, useConnect } from '@thirdweb-dev/react-core';
import { useState, useRef, useEffect } from 'react';
import { S as ScanScreen, j as isAndroid, o as openWindow, k as isIOS, C as ConnectingScreen, i as isMobile, G as GetStartedScreen } from './headlessConnectUI-a5cfa32b.esm.js';
import { jsx } from 'react/jsx-runtime';

const TrustScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = useRef(false);
  useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const trust = createInstance(walletConfig);
    setConnectionStatus("connecting");
    trust.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(trust);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton: hideBackButton
  });
};

const WCOpenURI = _ref => {
  let {
    onBack,
    onConnected,
    walletConfig,
    appUriPrefix,
    supportLink,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const connectStarted = useRef(false);
  useEffect(() => {
    if (connectStarted.current) {
      return;
    }
    connectStarted.current = true;
    const wallet = createInstance(walletConfig);
    setConnectionStatus("connecting");
    wallet.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        if (isAndroid()) {
          openWindow(`${appUriPrefix.android}wc?uri=${encodeURIComponent(uri)}`);
        } else if (isIOS()) {
          openWindow(`${appUriPrefix.ios}wc?uri=${encodeURIComponent(uri)}`);
        } else {
          openWindow(`${appUriPrefix.other}wc?uri=${encodeURIComponent(uri)}`);
        }
      },
      onConnected() {
        setConnectedWallet(wallet);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus, appUriPrefix]);
  return /*#__PURE__*/jsx(ConnectingScreen, {
    hideBackButton: hideBackButton,
    onBack: onBack,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    supportLink: supportLink
  });
};

const trustWalletUris = {
  ios: "trust://",
  android: "https://link.trustwallet.com/",
  other: "https://link.trustwallet.com/"
};

const TrustConnectUI = props => {
  const [screen, setScreen] = useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = useConnect();
  const hideBackButton = props.supportedWallets.length === 1;
  const {
    goBack
  } = props;
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
        }
      }

      // if trust is not injected
      else {
        // on mobile, open trust app link
        if (isMobile()) {
          setScreen("open-wc-uri");
        } else {
          // on desktop, show the trust scan qr code
          setScreen("scanning");
        }
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      hideBackButton: hideBackButton,
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://community.trustwallet.com/c/helpcenter/8"
    });
  }
  if (screen === "open-wc-uri") {
    return /*#__PURE__*/jsx(WCOpenURI, {
      hideBackButton: hideBackButton,
      onBack: props.goBack,
      onConnected: close,
      walletConfig: walletConfig,
      appUriPrefix: trustWalletUris,
      supportLink: "https://support.trustwallet.com/en/support/home"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: () => {
        setScreen("scanning");
      }
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(TrustScan, {
      hideBackButton: hideBackButton,
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      walletConfig: walletConfig
    });
  }
  return null;
};

function handelWCSessionRequest(wallet, uris) {
  if (isMobile()) {
    wallet.on("wc_session_request_sent", () => {
      if (isAndroid()) {
        openWindow(uris.android);
      } else if (isIOS()) {
        openWindow(uris.ios);
      } else {
        openWindow(uris.other);
      }
    });
  }
}

const trustWallet = options => {
  return {
    id: TrustWallet$1.id,
    meta: TrustWallet$1.meta,
    create: walletOptions => {
      const wallet = new TrustWallet$1({
        ...walletOptions,
        projectId: options?.projectId,
        qrcode: false
      });
      handelWCSessionRequest(wallet, trustWalletUris);
      return wallet;
    },
    connectUI: TrustConnectUI,
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return !!globalThis.window.ethereum.isTrust;
      }
      return false;
    }
  };
};

var TrustWallet = /*#__PURE__*/Object.freeze({
  __proto__: null,
  trustWallet: trustWallet
});

export { TrustWallet as T, WCOpenURI as W, handelWCSessionRequest as h, trustWallet as t };
